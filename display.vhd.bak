library ieee;
use ieee.std_logic_1164.all;

entity display is
generic (
constant WINDOW_WIDTH: integer := 32;
constant C_PIPE_WIDTH: integer := 64;
H_DISPLAY: integer := 1024;
V_DISPLAY: integer := 768
);

port (

	clk_65M : in std_logic;
	reset : in std_logic;
    win_ypos: in array (0 to 6) of integer range 32 to 736 ;
	hpos : in integer range 0 to H_DISPLAY - 1;
    vpos : in integer range 0 to V_DISPLAY - 1;
    pipe_xpos: in array (0 to 6) of integer range - C_PIPE_WIDTH to ( 2 * 1024 - (64 + 72) + C_PIPE_WIDTH );
	Rout, Gout, Bout : out std_logic_vector(7 downto 0)
);


end display;

architecture Behavioral of display is


signal color: std_logic_vector(23 downto 0);
signal on_pipe: std_logic_vector(6 downto 0);
signal pipe_xpos: integer range - C_PIPE_WIDTH to ( 2 * 1024 - (64 + 72) + C_PIPE_WIDTH);

constant BCKG_COLOR : std_logic_vector(23 downto 0) := x"777777";
constant PIPE_COLOR : std_logic_vector(23 downto 0) := x"007700";

begin

L : for i in 0 to 6 loop

    on_pipe(i) <= '1' when ( hpos >= pipe_xpos(i) and hpos< pipe_xpos(i) + C_PIPE_WIDTH) and (vpos <= win_ypos(i) and vpos > win_ypos(i) + WINDOW_WIDTH) else '0';

end loop L;

COL : process (reset, on_pipe) is

begin

if (reset = '1') then

color <= (others => '0');

else

case on_pipe is

    when "0000001" =>
        color <= PIPE_COLOR;
    when "0000010" =>
        color <= PIPE_COLOR;
    when "0000100" =>
        color <= PIPE_COLOR;
    when "0001000" =>
        color <= PIPE_COLOR;
    when "0010000" =>
        color <= PIPE_COLOR;
    when "0100000" =>
        color <= PIPE_COLOR;
    when "1000000" =>
        color <= PIPE_COLOR;
    when others =>   
        color <= BCKG_COLOR;
    

end case;

end if;

end COL;

Rout <= color(23 downto 16);
Gout <= color(15 downto 8);
Bout <= color (7 downto 0);

end Behavioral;